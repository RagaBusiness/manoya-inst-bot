require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');

const { askAI } = require('./ai');
const { lookupFAQ, composeContext } = require('./storage');

const app = express();
app.use(bodyParser.json());

// ===== ENV =====
const PORT = process.env.PORT || 3000;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const PAGE_ID = process.env.PAGE_ID;

// –í .env / Render Environment:
// - PAGE_ACCESS_TOKEN (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ page —Ç–æ–∫–µ–Ω)
//   –ª–∏–±–æ –≤—Ä–µ–º–µ–Ω–Ω–æ USER LL (—Ç–æ–≥–¥–∞ –Ω–∏–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å page —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
let PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN || process.env.ACCESS_TOKEN;

// ===== helpers =====
function logMeta(where, err) {
  if (err?.response) {
    console.error(`‚úó ${where} error:`, {
      status: err.response.status,
      data: err.response.data
    });
  } else {
    console.error(`‚úó ${where} error:`, err?.message || err);
  }
}

async function sendIGReply(igScopedUserId, text) {
  try {
    if (!PAGE_ACCESS_TOKEN) throw new Error("PAGE_ACCESS_TOKEN missing");
    const url = `https://graph.facebook.com/v23.0/${PAGE_ID}/messages`;
    await axios.post(
      url,
      { recipient: { id: igScopedUserId }, message: { text } },
      { params: { access_token: PAGE_ACCESS_TOKEN } }
    );
  } catch (err) {
    logMeta("sendIGReply", err);
  }
}

/**
 * –ï—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–µ–∂–∏—Ç USER LL —Ç–æ–∫–µ–Ω (–≤–º–µ—Å—Ç–æ page —Ç–æ–∫–µ–Ω–∞),
 * –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–≤–æ –¥–µ—Ä–Ω—É—Ç—å /me/accounts –∏ –ø–æ–ª—É—á–∏—Ç—å page access token.
 * –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞; –≤ .env –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º.
 */
async function maybeFetchPageTokenFromUserToken() {
  try {
    if (!PAGE_ACCESS_TOKEN) return;
    // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –ø–æ—Ö–æ–∂ –Ω–∞ page-token (–ø—Ä–æ—Å—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞) ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
    // (–û–±—ã—á–Ω–æ –∏ user, –∏ page –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ EA..; –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —è–≤–Ω–æ)
    const res = await axios.get(
      "https://graph.facebook.com/v23.0/me/accounts",
      { params: { access_token: PAGE_ACCESS_TOKEN } }
    );
    const page = res.data?.data?.find(p => String(p.id) === String(PAGE_ID));
    if (page?.access_token) {
      PAGE_ACCESS_TOKEN = page.access_token;
      console.log("üü£ PAGE token –ø–æ–ª—É—á–µ–Ω –∏–∑ USER LL —Ç–æ–∫–µ–Ω–∞ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞).");
    }
  } catch (err) {
    // —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞; –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logMeta("maybeFetchPageTokenFromUserToken", err);
  }
}

// ===== health =====
app.get('/health', (req, res) => {
  res.json({
    status: "ok",
    page_id: PAGE_ID ? "set" : "missing",
    ai: !!process.env.OPENAI_API_KEY
  });
});

// ===== webhook verify (GET) =====
app.get('/webhook', (req, res) => {
  try {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      console.log("‚úÖ Webhook verified");
      return res.status(200).send(challenge);
    }
    return res.sendStatus(403);
  } catch {
    return res.sendStatus(403);
  }
});

// ===== webhook incoming (POST) =====
// –§–æ—Ä–º–∞—Ç –¥–ª—è Messenger API for Instagram: body.entry[].messaging[]
app.post('/webhook', async (req, res) => {
  try {
    const body = req.body;

    if (body.object === 'instagram') {
      for (const entry of body.entry ?? []) {
        const messaging = entry.messaging ?? [];
        for (const event of messaging) {
          if (event.message && event.sender && event.sender.id) {
            const igUser = event.sender.id;
            const text = (event.message?.text || "").trim();

            let reply = lookupFAQ(text);
            if (!reply) {
              const context = composeContext();
              reply = await askAI({ userMessage: text, context });
            }

            await sendIGReply(igUser, reply);
          }
        }
      }
      return res.sendStatus(200);
    }

    return res.sendStatus(404);
  } catch (err) {
    logMeta("webhook handler", err);
    return res.sendStatus(500);
  }
});

// ===== start =====
app.listen(PORT, async () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  await maybeFetchPageTokenFromUserToken();
  if (PAGE_ACCESS_TOKEN) {
    console.log(`üü¢ PAGE token detected (len=${String(PAGE_ACCESS_TOKEN).length}).`);
  } else {
    console.warn("‚ö†Ô∏è PAGE token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–∫–∞–∂–∏ PAGE_ACCESS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏–ª–∏ USER LL –∏ PAGE_ID).");
  }
});
